@page "/fetchdata"
@using GERMAG.Client.Services
@using GERMAG.DataModel
@using GERMAG.Shared
@using GERMAG.Client.Core
@using GERMAG.Shared.Core
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
            @foreach (var model in _geoModels)
            {
                <tr>
                    <td>@model.LastPing?.ToShortDateString()</td>
                    <td>@model.Getrequest</td>
                    <td>@model.LastPing</td>
                    <td>@model.Id</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject] IRestInteropFactory RestInteropFactory { get; set; } = default!;
    [Inject] IGeothermalParameterService ParameterService { get; set; } = default!;
    private WeatherForecast[]? forecasts;
    private IRestInterop _restInterop { get; set; } = default!;
    private IEnumerable<GeothermalParameterModel> _geoModels = [];

    protected override async Task OnInitializedAsync()
    {
        _restInterop = RestInteropFactory.CreateRestInterop("api/WeatherForecast");
        forecasts = await _restInterop.GetAsync<WeatherForecast[]>("sampledata");
        _geoModels = await ParameterService.GetParameters() ?? [];
    }
}
